[{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/custom_functions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"More complex simulations","text":"vignette demonstrates simulation workflow investigate benefits issues co-locating recording sites different taxonomic groups, butterflies, plants, birds. generate species counts/abundance data across multiple sites, simulate dependencies species, incorporate temporal trends. approach helps assess whether using recording sites across different taxa groups beneficial problematic explore optimal strategies site co-location.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/custom_functions.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"More complex simulations","text":"First, load required packages set seed reproducibility.","code":"library(STRIDER) library(terra) #> terra 1.7.78 library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:terra': #>  #>     intersect, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) set.seed(42)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/custom_functions.html","id":"custom-environmental-state","dir":"Articles","previous_headings":"","what":"Custom Environmental State","title":"More complex simulations","text":"define custom environmental variables different spatial patterns simulate realistic scenarios. Next, integrate custom environmental variables simulation object.","code":"dim_x <- 500 dim_y <- 500  # Define environmental variables with different spatial patterns env1 <- terra::rast(matrix(rep(seq(from = 1, to = dim_x), times = dim_y), dim_x, dim_y)) env1 <- env1 / max(values(env1))  env2 <- terra::rast(matrix(rep(seq(from = dim_x, to = 1), each = dim_y), dim_x, dim_y)) env2 <- env2 / max(values(env2))  env3 <- terra::rast(matrix(runif(dim_x * dim_y), dim_x, dim_y)) env3 <- env3 / max(values(env3))  env4 <- terra::rast(matrix(sin(seq(0, pi, length.out = dim_x)), dim_x, dim_y)) env4 <- env4 / max(values(env4))  env5 <- terra::rast(matrix(cos(seq(0, pi, length.out = dim_y)), dim_x, dim_y)) env5 <- env5 / max(values(env5))  custom_env <- c(env1, env2, env3, env4, env5) names(custom_env) <- c(\"rainfall\", \"temperature\", \"urban_density\", \"elevation\", \"aspect\") background <- terra::rast(matrix(0, dim_x, dim_y)) sim_obj <- SimulationObject(background = background) sim_obj <- sim_state_env(sim_obj, spatraster = custom_env)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/custom_functions.html","id":"custom-suitability-functions-for-multiple-species","dir":"Articles","previous_headings":"","what":"Custom Suitability Functions for Multiple Species","title":"More complex simulations","text":"define custom suitability functions multiple species, influenced differently environmental variables. Realised suitability","code":"# Custom suitability function for multiple species custom_suitability_function <- function(simulation_object) {   # Extract environmental variables from the simulation object   env <- simulation_object@state_env      # Define the suitability functions for multiple species   species_suitability_functions <- list(     butterfly = function(env) (env$rainfall * env$temperature + env$urban_density^2) / 3,     plant = function(env) (env$rainfall + env$temperature^2 - env$urban_density) / 3,     bird = function(env) (env$rainfall + env$elevation + env$aspect) / 3,     mammal = function(env) (env$temperature * env$elevation - env$urban_density) / 3,     amphibian = function(env) (env$rainfall + env$elevation^2 - env$aspect) / 3   )      # Initialize an empty list to store the suitability layers   suitability_layers <- list()      # Loop through each species and calculate its suitability layer   for (species in names(species_suitability_functions)) {     suitability <- species_suitability_functions[[species]](env)     suitability[suitability<0] <- 0     suitability[suitability>1] <- 1     names(suitability) <- species     suitability_layers[[species]] <- suitability   }      # Combine all suitability layers into a single SpatRaster object   suitability_raster <- rast(suitability_layers)      return(suitability_raster) }  sim_obj <- sim_state_target_suitability(sim_obj, fun = custom_suitability_function) sim_obj <- sim_state_target_realise(sim_obj,fun=\"binomial\")"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/custom_functions.html","id":"custom-effort-function","dir":"Articles","previous_headings":"","what":"Custom Effort Function","title":"More complex simulations","text":"create custom effort function simulates sampling effort using combination urban density random sampling.","code":"custom_effort_function <- function(sim_obj, n_sites, n_taxa_per_site = 1) {   sites <- sample(cells(sim_obj@background), n_sites, replace = TRUE)   coords <- xyFromCell(sim_obj@background, sites)   effort_df <- data.frame(     x = coords[, 1],     y = coords[, 2]   )   effort_sf <- st_as_sf(effort_df, coords = c(\"x\", \"y\"))      site_taxa_combination <- expand.grid(sites = 1:n_sites,target = names(sim_obj@state_target_suitability))      effort_sf$taxa <- sample(names(sim_obj@state_target_suitability), n_taxa_per_site)      return(effort_sf) }  sim_obj <- sim_effort(sim_obj, fun = custom_effort_function, n_sites = 100)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/custom_functions.html","id":"custom-detection-and-reporting-functions","dir":"Articles","previous_headings":"","what":"Custom Detection and Reporting Functions","title":"More complex simulations","text":"define custom detection reporting functions introduce variability detection reporting probabilities, just use default now.","code":"# Simulate the detection sim_obj <- sim_detect(sim_obj,fun = \"equal\", prob = 0.5)  # Simulate the reporting sim_obj <- sim_report(sim_obj,fun = \"equal\", prob = 0.8, platform = \"iRecord\")"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/custom_functions.html","id":"visualisation","dir":"Articles","previous_headings":"","what":"Visualisation","title":"More complex simulations","text":"","code":"plot(sim_obj)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"introduction-and-set-up","dir":"Articles","previous_headings":"","what":"Introduction and set up","title":"A minimal example","text":"vignette, provide minimal example demonstrate different sampling methods impact species distribution modelling using STRIDER package. walk entire process, creating simulation object visualizing results. set loading required packages","code":"# everything you need for STRIDER library(STRIDER) library(terra) #> terra 1.7.78 library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE  #for general data wrangling and visualistion library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:terra': #>  #>     intersect, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)  #for model vaidation library(caret) #> Loading required package: lattice  #set a seed so it's reproducible set.seed(42)"},{"path":[]},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"background","dir":"Articles","previous_headings":"Simulating data","what":"Background","title":"A minimal example","text":"background serves spatial template, providing coordinate reference system (CRS) (needed), extent, resolution subsequent simulation steps. , create simple background raster dimensions 500x500.","code":"dim_x <- 500 dim_y <- 500 background <- terra::rast(matrix(0,dim_x,dim_y)) sim_obj <- SimulationObject(background = background)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"environmental-state","dir":"Articles","previous_headings":"Simulating data","what":"Environmental state","title":"A minimal example","text":"represent state environment, need capture variables (real abstract) influence target species might exist. example, define three environmental variables: define three variables: Rainfall (ecological niche) Temperature (ecological niche) Urban density (factor affecting effort)","code":"# Define an environmental state with two variables, env1 and env2 which create gradients perpendicular env1 <- terra::rast(matrix(rep(seq(from = 1, to = dim_x),times = dim_y),dim_x,dim_y)) env1 <- env1/max(values(env1)) env2 <- terra::rast(matrix(rep(seq(from = 1, to = dim_x),times = dim_y),dim_x,dim_y,byrow = T)) env2 <- env2/max(values(env2)) env3 <- terra::rast(matrix(rep(seq(from = 1, to = dim_x),times = dim_y),dim_x,dim_y,byrow = T)) env3 <- env3/max(values(env3)) env <- c(env1,env2,env3)  names(env) <- c(\"rainfall\",\"temperature\",\"urban_density\") plot(env) #slot it into the simulation object sim_obj <- sim_state_env(sim_obj,spatraster = env)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"target-state","dir":"Articles","previous_headings":"Simulating data","what":"Target state","title":"A minimal example","text":"simulate presence target species based environmental variables. suitability_function custom function designed transform environmental variables measure habitat suitability target species. function crucial ecological modeling, aim understand different environmental factors influence presence absence species. example, suitability determined averaging rainfall temperature values. basic approach assumes factors equally influence habitat suitability. practice, might complex model different environmental variables different weights non-linear effects suitability. suitability function used generate spatial layer represents habitat suitability target species based environmental conditions. layer used subsequent steps : Simulate Target Presence: Determine target species likely present. Realise Target State: Generate binary presence/absence abundance map based suitability values. suitability_function provided vignette simple example. real-world applications, might use sophisticated models incorporate multiple environmental variables interactions. STRIDER package allows define apply custom suitability functions, making flexible tool ecological modeling simulation.","code":"# Define a function to turn the environment into suitability suitabiity_function <- function(sim_obj){   out <- c(sim_obj@state_env$rainfall,sim_obj@state_env$temperature)   out <- mean(out)   names(out) <- \"target\"   out }  #apply function sim_obj <- sim_state_target_suitability(sim_obj,fun = suitabiity_function)  #realise sim_obj <- sim_state_target_realise(sim_obj,fun=\"binomial\")"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"effort","dir":"Articles","previous_headings":"Simulating data","what":"Effort","title":"A minimal example","text":"simulate effort sampling, biased urban density. sim_effort function used simulate sampling effort study area. step crucial understanding sampling effort distributed might bias observed data. description arguments provided: sim_obj: simulation object containing environmental state relevant data. fun = \"basic\": Specifies “basic” effort simulation function used. n_samplers = 500: Indicates 500 samplers used. n_visits = 1: sampler makes 1 visit. n_sample_units = 1: visit samples 1 unit. prob_raster = sim_obj@state_env$urban_density: probability raster derived urban_density layer environmental state. biases sampling effort towards areas higher urban density.","code":"# alternative method of defining effort: add custom points # points_sf <- st_as_sf(data.frame(x = c(20,40,60),y = c(20,40,60)),coords = c(\"x\", \"y\")) # sim_obj <- sim_effort(sim_obj, #                       sf = points_sf)  #simulate effort, biased by urban density sim_obj <- sim_effort(sim_obj,                       fun = \"basic\",                        n_samplers=500,                        n_visits = 1,                        n_sample_units = 1,                       prob_raster = sim_obj@state_env$urban_density)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"detection","dir":"Articles","previous_headings":"Simulating data","what":"Detection","title":"A minimal example","text":"Simulate detection target species 100% detection probability.","code":"#detection 100% sim_obj <- sim_detect(sim_obj,fun=\"equal\",prob = 1)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"reporting","dir":"Articles","previous_headings":"Simulating data","what":"Reporting","title":"A minimal example","text":"Simulate reporting detected species 100% reporting probability.","code":"#reporting 100% sim_obj <- sim_report(sim_obj,fun=\"equal\",prob = 1)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"plot-simulation-object","dir":"Articles","previous_headings":"Simulating data","what":"Plot simulation object","title":"A minimal example","text":"Finally, visualize components simulation object using custom plot() function.","code":"#visualise the simulation object's components plot(sim_obj)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"statistical-analysis","dir":"Articles","previous_headings":"","what":"Statistical analysis","title":"A minimal example","text":"Make “biological recording” dataset presence-dataset (po) presence-absence dataset (pa) Generate background samples aid model fitting Combine dataset fit models","code":"df <- export_df(sim_obj) data_pa <- df #presence absense data_po <- df[df$state_detected==1,] #presense only po_background <- effort_basic(sim_obj,100) |>   extract(x=sim_obj@state_env,xy=T) |>   st_as_sf(coords=c(\"x\",\"y\")) |>   mutate(state_detected=0)  data_po <- bind_rows(data_po,po_background) fit_mod <- function(df){   glm(state_detected~rainfall + temperature, data = df, family = binomial(link = \"logit\")) }  threshold = 0.5  # fit model to presence only data with background samples mod_po <- fit_mod(data_po) mod_po_predictions <- predict(sim_obj@state_env,mod_po,type = \"response\")   #Compare it to presence/absence data mod_pa <- fit_mod(data_pa) mod_pa_predictions <- predict(sim_obj@state_env,mod_pa,type = \"response\")"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"a-simulation-workflow","dir":"Articles","previous_headings":"","what":"A simulation workflow","title":"A minimal example","text":"section, run multiple simulations investigate impact different sampling methods model performance. use predefined objects new function adjust sampling weight rasters. chaining together various steps simulation pipeline, can systematically alter factors interest, sampling bias strength number samplers, study effects results.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"predefined-objects","dir":"Articles","previous_headings":"A simulation workflow","what":"Predefined Objects","title":"A minimal example","text":"start predefined objects: background, env, suitability_function. objects defined earlier sections vignette.","code":"#use pre-defined objects background #> class       : SpatRaster  #> dimensions  : 500, 500, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 500, 0, 500  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : lyr.1  #> min value   :     0  #> max value   :     0 env #> class       : SpatRaster  #> dimensions  : 500, 500, 3  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 500, 0, 500  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> names       : rainfall, temperature, urban_density  #> min values  :    0.002,       0.002,         0.002  #> max values  :    1.000,       1.000,         1.000 suitabiity_function #> function(sim_obj){ #>   out <- c(sim_obj@state_env$rainfall,sim_obj@state_env$temperature) #>   out <- mean(out) #>   names(out) <- \"target\" #>   out #> }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"adjusting-sampling-weight-raster","dir":"Articles","previous_headings":"A simulation workflow","what":"Adjusting Sampling Weight Raster","title":"A minimal example","text":"define function, adjust_towards_average, adjusts sampling weight raster based given proportion. function takes urban_density layer environmental state modifies values create varying levels sampling bias:","code":"#define a new function to adjust the sampling weight raster, takes values 0 to 1 adjust_towards_average <- function(x, proportion = 1) {   avg <- mean(values(x))   adjusted <- avg + proportion * (x - avg)   return(adjusted) }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"running-simulations","dir":"Articles","previous_headings":"A simulation workflow","what":"Running Simulations","title":"A minimal example","text":"Next, define main simulation function, run_simulation, incorporates entire simulation pipeline. function accepts three arguments: rep (repetition number), sampling_bias_strength (strength sampling bias), n_samplers (number samplers). function performs following steps: Adjust Sampling Weight: Modify urban_density raster based specified sampling_bias_strength. Simulate Sampling: Create new SimulationObject apply simulation steps: defining environmental state, simulating target suitability realization, simulating sampling effort adjusted sampling weight, detecting, reporting. Fit Model: Fit generalized linear model (GLM) sampled data. Generate Test Set: Create independent test set simulating additional sampling effort. Predict Test Set: Make predictions test set using fitted model. Compute Metrics: Calculate performance metrics, including accuracy, precision, recall, F1 score, based confusion matrix. Return Results: Output results data frame. running multiple simulations varying sampling biases numbers samplers, can gain insights factors impact performance model. results can help understanding effects sampling design model accuracy, precision, recall, F1 score, providing valuable information improving sampling strategies model reliability.","code":"# Here we define a function which has the full simulation pipeline chained together but with the arguments you wish to change as function arguments # Here my factors I'm interested in are the sampling bias strength and the number of samplers run_simulation <- function(rep,sampling_bias_strength, n_samplers){   sampling_weight <- adjust_towards_average(env$urban_density,sampling_bias_strength)      #simulate sampling   sim_obj <- SimulationObject(background = background) |>     sim_state_env(spatraster = env) |>     sim_state_target_suitability(fun = suitabiity_function) |>     sim_state_target_realise(fun=\"binomial\") |>     sim_effort(fun = \"basic\",                 n_samplers=n_samplers,                 n_visits = 1,                n_sample_units = 1,                prob_raster = sampling_weight,                sampling_bias_strength = sampling_bias_strength) |>     sim_detect(fun=\"equal\",prob = 1) |>     sim_report(fun=\"equal\",prob = 1)      #fit model to sampled data   mod1 <-      sim_obj |>     export_df() |>     fit_mod()      #generate an independent test set   test_set <- sim_obj |> sim_effort(fun = \"basic\",n_samplers = 10000) |> export_df()      # make prediction on the test set   test_prediction <- predict(mod1, test_set,type=\"response\")   test_set <- cbind(test_set,test_prediction)   test_set$predicton_realised <- as.numeric(test_set$test_prediction>0.5)      #confusion matrix   conf_matrix <- caret::confusionMatrix(     factor(test_set$predicton_realised),      factor(test_set$state_realised)     )      # Extract confusion matrix metrics   accuracy <- conf_matrix$overall['Accuracy']   precision <- conf_matrix$byClass['Pos Pred Value']   recall <- conf_matrix$byClass['Sensitivity']   f1_score <- 2 * ((precision * recall) / (precision + recall))    #results   data.frame(     #inputs     sampling_bias_strength = sampling_bias_strength,     n_samplers = n_samplers,     rep = rep,          #output     accuracy = accuracy,     precision = precision,     recall = recall,     f1_score = f1_score) }  #test the function and time it to extrapolate how long the run time will be single_run_time <- system.time(run_simulation(1,1,500))[\"elapsed\"]  # define parameters data frame simulation_parameters <-    expand.grid(     rep = 1:3,     sampling_bias_strength = c(0,0.5,1),     n_samplers=seq(from = 50,to= 350, by = 100),     stringsAsFactors = F   )  #estimated run time print(paste0(\"Estimated run time: \",round(single_run_time*nrow(simulation_parameters)),\" seconds\" )) #> [1] \"Estimated run time: 32 seconds\"  #do the simulation for the required parameters and combine the rows into a data frame sim_outputs <- apply(simulation_parameters, 1, function(row) {   run_simulation(     as.numeric(row[\"rep\"]),      as.numeric(row[\"sampling_bias_strength\"]),      as.numeric(row[\"n_samplers\"])) }) %>% bind_rows()"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/articles/example_minimal.html","id":"plot-results","dir":"Articles","previous_headings":"A simulation workflow","what":"Plot results","title":"A minimal example","text":"code creates visualization show F1 score model influenced number samples strength sampling bias:  Impact Sample Size: F1 score becomes stable number samples increases. sample size small, F1 score shows variability. Impact Sampling Bias: Higher sampling bias tends decrease F1 score, indicated downward trend lines corresponding higher bias levels. visualization helps understand design sampling process, specifically number samples extent sampling bias, can affect performance model. insights crucial optimizing sampling strategies achieve reliable accurate models.","code":"#visualise how f1 score is impacted by the number of samples and the strength of the sampling bias sim_outputs %>% ggplot(aes(x = n_samplers+sampling_bias_strength*20-10 ,                            y = f1_score,                            colour = as.factor(sampling_bias_strength),                            group = sampling_bias_strength))+   geom_point()+   geom_smooth(se=F,method = \"lm\")+   theme_minimal()+   scale_x_continuous(breaks=seq(from = 50,to= 400, by = 50))+   labs(colour = \"Strength of sampling bias\")+   xlab(\"Number of samples\")+   ylab(\"F1 score\") #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Rolph. Maintainer.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rolph S (2024). STRIDER: Simulating STate, effoRt, Identification/DEtection Reporting Biodiversity Data. R package version 0.0.1, https://biologicalrecordscentre.github.io/STRIDER/.","code":"@Manual{,   title = {STRIDER: Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data},   author = {Simon Rolph},   year = {2024},   note = {R package version 0.0.1},   url = {https://biologicalrecordscentre.github.io/STRIDER/}, }"},{"path":[]},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"what-is-strider","dir":"","previous_headings":"","what":"What is STRIDER?","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"STRIDER R package facilitating simulation virtual species subsequent sampling reporting. development motivated need simulate citizen science data, alongside biodiversity data sampling, validate method development. language intentionally generic uses terms ‘target’ mean species, organisms similar. simulation split series processes: Environment (e.g abiotic biotic) Target (e.g. species) suitability function environment Target realised state function target suitability Effort: sampling effort allocated? (//sampling? /sampling?) Identification/Detection: happens sampler encounters target (species detected? species correctly identified?) Reporting: interaction reported? (species recorded? absences recorded? spatial resolution reported ?)","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"STRIDER provides reproducible basis simulation needs. 3 key components. Firstly, provides SimulationObject class slots object describing stage simulation workflow. keeps everything one R object can Secondly, STRIDER provides series functions build simulation object. includes straightforward functions common simulation approaches ability bring data/functions. Thirdly, STRIDER provide (due course) example workflows can adapted extended kick start simulation work.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"Install GitHub","code":"remotes::install_github(\"BiologicalRecordsCentre/STRIDER\")"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"terra, sf targets recommended pipeline/workflow management","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"how-to-use-the-r-package","dir":"","previous_headings":"","what":"How to use the R package","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"5 processes, choices functions use depending needs. process, basic version demonstration purposes. functions follow basic schema whereby objects previous stage, along background object, combined single simulation_object. object used argument subsequent functions, whether actually used calculations within function. simulation_object includes following components: @background: Background extent resolution simulated reality @state_env: Simulated state environment @state_target_suitability: Simulated state target (environmental suitability) @state_target_realised: Simulated state target (realised absolute/binary value) @effort: Simulated sampling effort @detect: Simulated detection information @report: Simulated reporting information can access manipulate simulation_object step generate outputs corresponding processes. outputs step terra SpatRasters sf feature collections (POINT), shown figure . can use custom R scripts generate outputs steps, ensuring flexibility interoperability. functions used stage follows: sim_state_env(simulation_object, ...) sim_state_target_suitability(simulation_object, ...) sim_state_target_realise(simulation_object, ...) sim_effort(simulation_object, ...) sim_detect(simulation_object, ...) sim_report(simulation_object, ...) use targets R package create reproducible workflows simulating data.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"simulating-state","dir":"","previous_headings":"","what":"Simulating state","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"term “state” refers underlying true conditions environment target. Environmental State: refers simulated state environment, can include various abiotic biotic factors, temperature, humidity, terrain features, vegetation, relevant ecological parameters. Simulating environmental state facilitates understanding different environmental conditions may influence presence behaviour target species. Target State: represents simulated distribution target within environment. target often influenced environmental state. STRIDER target represented two forms: continuous variable representing probability occurrence (slot @state_target_suitability), realised absolute value (slot @state_target_realised) contain binary (0 1) representing species occupancy positive integer representing abundance. current form STRIDER represents states grid-based relies consistent grid resolution/extent across state variables. States represented rasters (SpatRaster) resolution, extent CRS (CRS). simulate state environment target separately. simulation object uses SpatRaster slot @background. resolution, extent CRS inherited background simulating states. future developments consider using point process models describe target state slot @state_target capturing intensity surface @state_target_realised capturing realised points.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"defining-the-background","dir":"","previous_headings":"Simulating state","what":"Defining the background","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"background simply SpatRaster CRS/extent/resolution used subsequent simulation steps. create background using 30x30 matrix create simulation object .","code":"# Create the background background <- terra::rast(matrix(0,30,30))  # Create the simulation object sim_obj <- SimulationObject(background = background) sim_obj <- sim_state_env(sim_obj,fun = state_env_gradient,from = 0,to = 1) sim_obj ## An object of class \"SimulationObject\" ## Slot \"background\": ## class       : SpatRaster  ## dimensions  : 30, 30, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 30, 0, 30  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        : lyr.1  ## min value   :     0  ## max value   :     0  ##  ## Slot \"state_env\": ## class       : SpatRaster  ## dimensions  : 30, 30, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 30, 0, 30  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        : env  ## min value   :   0  ## max value   :   1  ##  ## Slot \"state_target_suitability\": ## NULL ##  ## Slot \"state_target_realised\": ## NULL ##  ## Slot \"effort\": ## NULL ##  ## Slot \"detect\": ## NULL ##  ## Slot \"report\": ## NULL ##  ## Slot \"metadata\": ## $state_env ## $state_env$fun ## state_env_gradient ##  ## $state_env$from ## [1] 0 ##  ## $state_env$to ## [1] 1 ##  ##  ##  ## Slot \"hash\": ## [1] \"841156773684e37801aefddb92881877\""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"simulating-the-environmental-state","dir":"","previous_headings":"Simulating state","what":"Simulating the environmental state","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"want represent state environment. Essentially need capture variables (real abstract) influence target might exist, effort might allocated. might include: Physical features like altitude slope Climatic variable rainfall temperature Effort-impacting variables human population, focal points (e.g. nature reserves) access features (footpaths). output stage SpatRaster layers environmental variable. currently way capture non-gridded spatial features lines polygons derive grid-based approximations . works well time invariant environmental variables. need time variant environmental variables best current implementation create simulation object time step, sample time step, sample time step, aggregate later. function simulating environmental state sim_state_env minimal version function sim_state_env(fun=\"uniform\") produces simulation object single layer uniform value space. BYOD (Bring Data) function sim_state_env(spatraster = [your_raster]) can provide SpatRaster custom environmental state meets needs added correct slot.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"simulating-the-target-state","dir":"","previous_headings":"Simulating state","what":"Simulating the target state","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"define state target targets. define two versions : continuous variable representing probability occurrence (slot @state_target), realised absolute value (slot @state_target_realised) contain binary (0 1) representing species occupancy positive integer representing abundance. ’s example:  representations state represented simulation object SpatRaster layers target. , want target change time create list rasters list item represents target state time step, need wrangling. function simulating target state sim_state_target_suitability minimal version function sim_state_target_suitability(fun=\"uniform\") produces uniform abundance across space. BYOD function sim_state_target(fun=[custom functio]) meaning also use packages generate target state (eg.rangeshiftR, virtualspecies) convert output SpatRaster.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"simulating-effort","dir":"","previous_headings":"","what":"Simulating effort","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"context STRIDER, “effort” refers representation sampling activities, encompassing allocation execution various sampling procedures across defined landscape study area. Several factors potentially predict allocation execution sampling efforts, including limited : Accessibility: Proximity human infrastructure, trails, road networks might influence sampling efforts concentrated. Environmental conditions: Factors topography, habitat type, climate affect selection sampling sites. Species-specific considerations: presence specific target species preferred habitats influence sampling efforts directed. Functionally, effort STRIDER currently describes: () sampling? samplers visit sampling? sampling happen? (captured implicitly) many ways simulate effort sampling points based cell weights, agent based models, manually setting specific locations sampling therefore STRIDER facilitates representing effort realisation sampling procedures. want capture information probabilities locations sampled either non-slotted SpatRaster, capture information environmental state. slot effort @effort contains sf spatial data frame following columns: sampler - () visit - identifier visit sampler unit - identifier sampling unit within visit cell_id - geometry - ’s basic example generate effort comprising two samplers, making one visit, within visit use two sampling units (meaning two opportunities observe target present). function simulating effort start sim_effort minimal function process sim_effort(fun=\"uniform\") effort uniformly distributed across landscape.","code":"# Simulate the sampling effort sim_obj <- sim_effort(sim_obj,fun = \"basic\", n_samplers=2, n_visits = 1, n_sample_units = 2) sim_obj@effort ## Simple feature collection with 4 features and 8 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 4.5 ymin: 8.5 xmax: 11.5 ymax: 13.5 ## CRS:           NA ##   sampler visit unit cell_id       env target target_suitability ## 1       1     1    1     492 0.3793103    env          0.7586207 ## 2       1     1    2     492 0.3793103    env          0.7586207 ## 3       2     1    1     635 0.1379310    env          0.2758621 ## 4       2     1    2     635 0.1379310    env          0.2758621 ##   target_realised          geometry ## 1               1 POINT (11.5 13.5) ## 2               1 POINT (11.5 13.5) ## 3               0   POINT (4.5 8.5) ## 4               0   POINT (4.5 8.5)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"simulating-identificationdetection","dir":"","previous_headings":"","what":"Simulating identification/detection","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"STRIDER, “detection” refers process whether applied effort identifies records presence target within specified visit. describes interaction realised target state effort, may also influenced environmental state. Detection can influenced various factors sampling methodology, proficiency observer, environmental conditions, characteristics target species. Given detection, “identification” refers accurate recognition categorization species data collection process. step involves correctly identifying observed organism appropriate taxonomic group species. Samplers may always identify target correctly functions may take confusion matrices. minimal function process sim_detect(fun=\"equal\") targets detected equal probability.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"simulating-the-reporting","dir":"","previous_headings":"","what":"Simulating the reporting","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"reporting phase STRIDER designed simulate various reporting scenarios, considering factors reporting probabilities, data resolution, recording platforms, among others. Data may reported exactly sampler experienced , example: Aggregating detections across multiple sampling units species observed across one visit. Aggregating coarser spatial resolution interesting novel species reported (eg. result life listing) minimal function process sim_report(fun=\"equal\") data reported equal probability.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"custom-functions","dir":"","previous_headings":"","what":"Custom functions","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"simulation stage can provide function simulate process. different parameters want provide functions can pass named arguments function. example want use custom function produce environmental suitability layer target, based environment define following function suit_fun(): function must take SimulationObject first argument. means ’ve got access simulation components. Therefore, example wanted detection process depend environment ’d simply need access via correct slot.","code":"suit_fun <- function(sim_obj){   target_suitability <- sim_obj@background # use the background to    terra::values(target_suitability) <- 0.2   names(target_suitability) <- \"frog\" #give my layer a name    # set suitability under certain critera eg. 0.7 when rainfall>500 and altitude < 50   target_suitability[[sim_obj@state_env$rainfall>500 & sim_obj@state_env$altitude<50]] <- 0.4   target_suitability[sim_obj@state_env$rainfall>800 & sim_obj@state_env$altitude<40] <- 0.9    target_suitability #return just the suitability layer }  sim_obj <- sim_state_target_suitability(sim_obj, fun = suit_fun)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/index.html","id":"a-complete-minimal-example","dir":"","previous_headings":"","what":"A complete minimal example","title":"Simulating the STate, effoRt, Identification/DEtection and Reporting of Biodiversity Data","text":"example runs simple example plots output.","code":"rm(sim_obj) library(STRIDER) library(terra) library(sf)  # Create the background background <- terra::rast(matrix(0,50,50))  # Create the simulation object sim_obj <- SimulationObject(background = background)  # Simulate the environment state sim_obj <- sim_state_env(sim_obj,fun = state_env_gradient,from = 0,to = 1)  # Simulate the target state state_target_suitability_example <- function(sim_obj){    out <-  sim_obj@state_env*2   out[out>1] <- 2-out[out>1]   out # optimal environment is 0.5 } sim_obj <- sim_state_target_suitability(sim_obj,state_target_suitability_example)  #realise the state sim_obj <- sim_state_target_realise(sim_obj,fun = \"binomial\")  # Simulate the sampling effort sim_obj <- sim_effort(sim_obj,fun = \"basic\", n_visits = 100, replace = FALSE)  # Simulate the detection sim_obj <- sim_detect(sim_obj,fun = \"equal\", prob = 0.5)  # Simulate the reporting sim_obj <- sim_report(sim_obj,fun = \"equal\", prob = 0.8, platform = \"iRecord\")  plot(sim_obj)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/detect_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Presence/Absence Based on Equal Probability — detect_equal","title":"Detect Presence/Absence Based on Equal Probability — detect_equal","text":"Detect Presence/Absence Based Equal Probability","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/detect_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Presence/Absence Based on Equal Probability — detect_equal","text":"","code":"detect_equal(simulation_object, prob = 1)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/detect_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Presence/Absence Based on Equal Probability — detect_equal","text":"simulation_object SimulationObject containing realized target states sampling effort points. prob detection probability. Default 1.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/detect_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Presence/Absence Based on Equal Probability — detect_equal","text":"data frame containing detection results.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/detect_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Presence/Absence Based on Equal Probability — detect_equal","text":"","code":"if (FALSE) { # \\dontrun{ detections <- detect_equal(simulation_object, prob = 0.8) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/effort_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Sampling Effort Points — effort_basic","title":"Generate Sampling Effort Points — effort_basic","text":"Generate Sampling Effort Points","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/effort_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Sampling Effort Points — effort_basic","text":"","code":"effort_basic(   simulation_object,   n_samplers = 1,   n_visits = 1,   n_sample_units = 1,   replace = FALSE,   prob_raster = NULL )"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/effort_basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Sampling Effort Points — effort_basic","text":"simulation_object SimulationObject containing target suitability layers. n_samplers number samplers. Default 1. n_visits number visits per sampler. Default 1. n_sample_units number sample units per visit. Default 1. replace logical value indicating whether sampling replacement allowed. Default FALSE. prob_raster SpatRaster providing probability sampling cell. Default NULL.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/effort_basic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Sampling Effort Points — effort_basic","text":"sf object containing sampling effort points.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/effort_basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Sampling Effort Points — effort_basic","text":"","code":"if (FALSE) { # \\dontrun{ effort <- effort_basic(simulation_object, n_samplers = 2, n_visits = 3) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/export_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Simulation Report Data Frame — export_df","title":"Export Simulation Report Data Frame — export_df","text":"function exports report data frame SimulationObject.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/export_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Simulation Report Data Frame — export_df","text":"","code":"export_df(sim_obj)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/export_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Simulation Report Data Frame — export_df","text":"sim_obj SimulationObject containing report data frame.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/export_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Simulation Report Data Frame — export_df","text":"data frame containing report SimulationObject.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/export_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Simulation Report Data Frame — export_df","text":"","code":"if (FALSE) { # \\dontrun{ report_df <- export_df(simulation_object) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/report_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Report Detections Based on Reporting Probability — report_equal","title":"Report Detections Based on Reporting Probability — report_equal","text":"Report Detections Based Reporting Probability","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/report_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report Detections Based on Reporting Probability — report_equal","text":"","code":"report_equal(simulation_object, prob = 1, platform = \"None\")"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/report_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report Detections Based on Reporting Probability — report_equal","text":"simulation_object SimulationObject containing detection results. prob reporting probability. Default 1. platform platform used reporting. Default \"None\".","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/report_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report Detections Based on Reporting Probability — report_equal","text":"data frame containing reporting results.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/report_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report Detections Based on Reporting Probability — report_equal","text":"","code":"if (FALSE) { # \\dontrun{ reports <- report_equal(simulation_object, prob = 0.8, platform = \"Online\") } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines detection using a custom function — sim_detect","title":"Defines detection using a custom function — sim_detect","text":"Defines detection using custom function","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines detection using a custom function — sim_detect","text":"","code":"sim_detect(simulation_object, fun, ...)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_detect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines detection using a custom function — sim_detect","text":"simulation_object SimulationObject fun function takes simulation object returns simulation object  data detection slot ... parameters user supplied function fun","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_detect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines detection using a custom function — sim_detect","text":"SimulationObject detection","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_detect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines detection using a custom function — sim_detect","text":"","code":"if (FALSE) { # \\dontrun{ sim_effort_fun(simulation_object, fun, ...) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_effort.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines effort using a built-in function, a custom function, or sf POINTS — sim_effort","title":"Defines effort using a built-in function, a custom function, or sf POINTS — sim_effort","text":"function applies user-supplied function SimulationObject define effort.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_effort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines effort using a built-in function, a custom function, or sf POINTS — sim_effort","text":"","code":"sim_effort(simulation_object, fun, sf = NULL, ...)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_effort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines effort using a built-in function, a custom function, or sf POINTS — sim_effort","text":"simulation_object SimulationObject containing simulation data. fun function takes simulation_object additional parameters, returns modified simulation_object effort data. sf Optional; provided, skips applying 'fun' directly uses Spatial*DataFrame (sf) effort calculation. ... Additional parameters passed user-supplied function 'fun'.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_effort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines effort using a built-in function, a custom function, or sf POINTS — sim_effort","text":"SimulationObject updated effort information.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_effort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines effort using a built-in function, a custom function, or sf POINTS — sim_effort","text":"","code":"if (FALSE) { # \\dontrun{ sim_effort(simulation_object, fun, ...) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines reporting using a custom function — sim_report","title":"Defines reporting using a custom function — sim_report","text":"Defines reporting using custom function","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines reporting using a custom function — sim_report","text":"","code":"sim_report(simulation_object, fun, ...)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defines reporting using a custom function — sim_report","text":"simulation_object SimulationObject fun function takes simulation object returns simulation object  data reporting slot ... parameters user supplied function fun","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defines reporting using a custom function — sim_report","text":"SimulationObject reporting","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defines reporting using a custom function — sim_report","text":"","code":"if (FALSE) { # \\dontrun{ sim_report_fun(simulation_object, fun, ...) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the state of the environment — sim_state_env","title":"Define the state of the environment — sim_state_env","text":"function updates state environment given simulation object either using provided SpatRaster, predefined function (`gradient` `uniform`), user-defined function. updated simulation object new state environment metadata returned.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the state of the environment — sim_state_env","text":"","code":"sim_state_env(   simulation_object,   fun = NULL,   filename = NULL,   spatraster = NULL,   ... )"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the state of the environment — sim_state_env","text":"simulation_object object representing simulation. object contain `background` slot `state_env` slot. fun character string specifying name predefined function            (`\"gradient\"` `\"uniform\"`) user-defined function. filename character string specifying filename save resultant SpatRaster. `NULL`, SpatRaster saved file. spatraster `SpatRaster` object used directly state environment. provided, overrides `fun` parameter. ... Additional arguments passed function specified `fun`.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the state of the environment — sim_state_env","text":"updated simulation object newly added state environment correct slot","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define the state of the environment — sim_state_env","text":"- `spatraster` provided, function checks dimensions match   simulation object's background. - `fun` provided character string, must either `\"gradient\"` `\"uniform\"`. - `fun` provided user-defined function, applied simulation object. - `filename` provided, resultant SpatRaster saved, filename returned.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the state of the environment — sim_state_env","text":"","code":"if (FALSE) { # \\dontrun{ sim_obj <- sim_state_env(sim_obj, fun = \"uniform\", value = 0.5) sim_obj <- sim_state_env(sim_obj, fun = \"gradient\", from = 0, to = 1) sim_obj <- sim_state_env(sim_obj, spatraster = my_spatraster) sim_obj <- sim_state_env(sim_obj, fun = my_custom_function) sim_obj <- sim_state_env(sim_obj, fun = \"uniform\", filename = \"output.tif\") } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_realise.html","id":null,"dir":"Reference","previous_headings":"","what":"Realizes the State Target into Binary or Abundance — sim_state_target_realise","title":"Realizes the State Target into Binary or Abundance — sim_state_target_realise","text":"function realizes state target given simulation object either binary (presence/absence) abundance using predefined custom function. updated simulation object new state target realization metadata returned.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_realise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Realizes the State Target into Binary or Abundance — sim_state_target_realise","text":"","code":"sim_state_target_realise(simulation_object, fun, filename = NULL, ...)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_realise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Realizes the State Target into Binary or Abundance — sim_state_target_realise","text":"simulation_object SimulationObject containing state environment. fun Either 'binomial' 'threshold' use included functions, custom function takes SimulationObject environment slot outputs target suitability SpatRaster indicating either presence/absence abundance. filename character string specifying filename save resultant SpatRaster. `NULL`, SpatRaster saved file. Default `NULL`. ... Additional arguments passed function specified `fun`.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_realise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Realizes the State Target into Binary or Abundance — sim_state_target_realise","text":"updated simulation object new state target realization.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_realise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Realizes the State Target into Binary or Abundance — sim_state_target_realise","text":"- `fun` provided 'binomial' 'threshold', corresponding included function used. - `fun` custom function, applied simulation object. - `filename` provided, resultant SpatRaster saved, filename returned.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_realise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Realizes the State Target into Binary or Abundance — sim_state_target_realise","text":"","code":"if (FALSE) { # \\dontrun{ sim_obj <- sim_state_target_realise(sim_obj, fun = \"binomial\") sim_obj <- sim_state_target_realise(sim_obj, fun = \"threshold\", threshold = 0.5) sim_obj <- sim_state_target_realise(sim_obj, fun = my_custom_function) sim_obj <- sim_state_target_realise(sim_obj, fun = my_custom_function, filename = \"output.tif\") } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_suitability.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the Target Suitability from the State Environment — sim_state_target_suitability","title":"Determine the Target Suitability from the State Environment — sim_state_target_suitability","text":"function calculates state target suitability given simulation object using either predefined custom function. updated simulation object new state target suitability metadata returned.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_suitability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the Target Suitability from the State Environment — sim_state_target_suitability","text":"","code":"sim_state_target_suitability(simulation_object, fun, filename = NULL, ...)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_suitability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the Target Suitability from the State Environment — sim_state_target_suitability","text":"simulation_object SimulationObject fun Either 'uniform' use included uniform suitability function custom function takes SimulationObject environment slot outputs target suitability SpatRaster many bands targets filename character string specifying filename save resultant SpatRaster. `NULL`, SpatRaster saved file. ... Additional arguments passed function specified `fun`.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_suitability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the Target Suitability from the State Environment — sim_state_target_suitability","text":"updated simulation object new state target suitability.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_suitability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the Target Suitability from the State Environment — sim_state_target_suitability","text":"- `fun` provided 'uniform', function uses included uniform suitability function. unlikely useful function provided baseline. - `fun` character string corresponding function name, function checks existence retrieves . - `fun` custom function, applied simulation object. - `filename` provided, resultant SpatRaster saved, filename returned.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/sim_state_target_suitability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the Target Suitability from the State Environment — sim_state_target_suitability","text":"","code":"if (FALSE) { # \\dontrun{ sim_obj <- sim_state_target_suitability(sim_obj, fun = \"uniform\", value = 0.5) sim_obj <- sim_state_target_suitability(sim_obj, fun = my_custom_function) sim_obj <- sim_state_target_suitability(sim_obj, fun = my_custom_function, filename = \"output.tif\") } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Gradient SpatRaster for Environmental State — state_env_gradient","title":"Create a Gradient SpatRaster for Environmental State — state_env_gradient","text":"Create Gradient SpatRaster Environmental State","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Gradient SpatRaster for Environmental State — state_env_gradient","text":"","code":"state_env_gradient(simulation_object, from = 0, to = 1)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Gradient SpatRaster for Environmental State — state_env_gradient","text":"simulation_object SimulationObject containing background layer. starting value gradient. Default 0. ending value gradient. Default 1.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Gradient SpatRaster for Environmental State — state_env_gradient","text":"SpatRaster representing gradient environmental state.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Gradient SpatRaster for Environmental State — state_env_gradient","text":"","code":"if (FALSE) { # \\dontrun{ sim_state <- state_env_gradient(simulation_object, from = 0, to = 1) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_uniform.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Uniform SpatRaster for Environmental State — state_env_uniform","title":"Create a Uniform SpatRaster for Environmental State — state_env_uniform","text":"Create Uniform SpatRaster Environmental State","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_uniform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Uniform SpatRaster for Environmental State — state_env_uniform","text":"","code":"state_env_uniform(simulation_object, value = 1)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_uniform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Uniform SpatRaster for Environmental State — state_env_uniform","text":"simulation_object SimulationObject containing background layer. value value fill raster . Default 1.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_uniform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Uniform SpatRaster for Environmental State — state_env_uniform","text":"SpatRaster representing uniform environmental state.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_env_uniform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Uniform SpatRaster for Environmental State — state_env_uniform","text":"","code":"if (FALSE) { # \\dontrun{ sim_state <- state_env_uniform(simulation_object, value = 1) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Realize Target Suitability Using Binomial Distribution — state_target_realise_binomial","title":"Realize Target Suitability Using Binomial Distribution — state_target_realise_binomial","text":"Realize Target Suitability Using Binomial Distribution","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Realize Target Suitability Using Binomial Distribution — state_target_realise_binomial","text":"","code":"state_target_realise_binomial(simulation_object)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Realize Target Suitability Using Binomial Distribution — state_target_realise_binomial","text":"simulation_object SimulationObject containing target suitability layers.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Realize Target Suitability Using Binomial Distribution — state_target_realise_binomial","text":"SpatRaster realized target states binary values.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Realize Target Suitability Using Binomial Distribution — state_target_realise_binomial","text":"","code":"if (FALSE) { # \\dontrun{ binary_state <- state_target_realise_binomial(simulation_object) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Realize Target Suitability Using Threshold — state_target_realise_threshold","title":"Realize Target Suitability Using Threshold — state_target_realise_threshold","text":"Realize Target Suitability Using Threshold","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Realize Target Suitability Using Threshold — state_target_realise_threshold","text":"","code":"state_target_realise_threshold(simulation_object, threshold)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Realize Target Suitability Using Threshold — state_target_realise_threshold","text":"simulation_object SimulationObject containing target suitability layers. threshold numeric value specifying threshold realization.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Realize Target Suitability Using Threshold — state_target_realise_threshold","text":"SpatRaster realized target states binary values based threshold.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_realise_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Realize Target Suitability Using Threshold — state_target_realise_threshold","text":"","code":"if (FALSE) { # \\dontrun{ binary_state <- state_target_realise_threshold(simulation_object, threshold = 0.5) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_uniform.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Uniform Suitability SpatRaster for Target State — state_target_suitability_uniform","title":"Create a Uniform Suitability SpatRaster for Target State — state_target_suitability_uniform","text":"Create Uniform Suitability SpatRaster Target State","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_uniform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Uniform Suitability SpatRaster for Target State — state_target_suitability_uniform","text":"","code":"state_target_suitability_uniform(simulation_object, value = 0.5, n_targets = 1)"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_uniform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Uniform Suitability SpatRaster for Target State — state_target_suitability_uniform","text":"simulation_object SimulationObject containing background layer. value value fill raster . Default 0.5. n_targets number target layers. Default 1.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_uniform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Uniform Suitability SpatRaster for Target State — state_target_suitability_uniform","text":"SpatRaster representing uniform suitability target state.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_uniform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Uniform Suitability SpatRaster for Target State — state_target_suitability_uniform","text":"","code":"if (FALSE) { # \\dontrun{ sim_state <- state_target_suitability_uniform(simulation_object, value = 0.5, n_targets = 2) } # }"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_virtsp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Virtual Species Suitability SpatRaster for Target State — state_target_suitability_virtsp","title":"Create Virtual Species Suitability SpatRaster for Target State — state_target_suitability_virtsp","text":"Create Virtual Species Suitability SpatRaster Target State","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_virtsp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Virtual Species Suitability SpatRaster for Target State — state_target_suitability_virtsp","text":"","code":"state_target_suitability_virtsp(   simulation_object,   n_targets = 1,   params = NULL )"},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_virtsp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Virtual Species Suitability SpatRaster for Target State — state_target_suitability_virtsp","text":"simulation_object SimulationObject containing background environmental layers. n_targets number target layers. Default 1. params list parameters generating virtual species. Default NULL.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_virtsp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Virtual Species Suitability SpatRaster for Target State — state_target_suitability_virtsp","text":"SimulationObject updated target suitability layers.","code":""},{"path":"https://biologicalrecordscentre.github.io/STRIDER/reference/state_target_suitability_virtsp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Virtual Species Suitability SpatRaster for Target State — state_target_suitability_virtsp","text":"","code":"if (FALSE) { # \\dontrun{ sim_object <- state_target_suitability_virtsp(simulation_object, n_targets = 2) } # }"}]
